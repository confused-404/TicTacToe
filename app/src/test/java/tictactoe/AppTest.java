/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tictactoe;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import tictactoe.game.Game;

import static org.junit.jupiter.api.Assertions.*;

import java.io.ByteArrayInputStream;
import java.util.Random;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;

class AppTest {

    // WHEN RUNNING TESTS THEY ALL FAIL BECAUSE IDK HOW TO SIMULATE INPUT FOR THE TESTS WITHOUT HAVING TO SWITCH CODE WHEN I RUN THE PROGRAM AND WHEN I TEST

    static Integer[] inputInts = { 3, 4, 5, 6, 7, 8, 9, 10 };

    private static final String TEST_INPUT = Integer.toString(new Random().nextInt(inputInts.length));
    private App app;

    @BeforeEach
    void newApp() {
        app = new App();
    }

    @BeforeAll
    static void setUpInputStream() {
        System.setIn(new ByteArrayInputStream(TEST_INPUT.getBytes()));
    }


    @DisplayName("App has a greeting")
    @Test
    void appHasAGreeting() {
        String greeting = app.generateGreeting();
        assertNotNull(greeting, "The greeting should not be null");
        assertEquals("Hello, welcome to Tic-Tac-Toe!", greeting, "Invalid greeting");
    }

    @DisplayName("App has a game object")
    @Test
    void getGameWorks() {
        Game game = app.getGame();
        assertNotNull(game, "The Game object should not be null");
        // Add additional tests to check the Game object if needed.
    }
}